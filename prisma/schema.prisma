generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url  	    = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum UserRole {
  ADMIN
  USER
}

model User {
  id                      String                  @id @default(cuid())
  name                    String?
  email                   String?                 @unique
  tempEmail               String?
  emailVerified           DateTime?
  image                   String?
  password                String?
  role                    UserRole                @default(USER)
  accounts                Account[]
  isTwoFactorEnabled      Boolean                 @default(false)
  twoFactorConfirmation   TwoFactorConfirmation?

  Student Student[]
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  refresh_token      String?  @db.Text
  access_token       String?  @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?  @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model VerificationToken {
  id              String    @id @default(cuid())
  userId          String
  token           String    @unique
  isUpdateEmail   Boolean   @default(false)
  expires         DateTime

  @@unique([userId, token])
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorToken {
  id        String    @id @default(cuid())
  email     String
  token     String    @unique
  expires   DateTime

  @@unique([email, token])
}

model TwoFactorConfirmation {
  id      String  @id @default(cuid())
  userId  String
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId])
}

model Institute {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  short_name  String    @unique
  affiliation String    @db.VarChar(10) @default("IIIT")
  logo_url    String
  website_url String
  mail_slug   String    @unique

  students    Student[]
}

model Student {
  id                Int       @id @default(autoincrement())
  user_id           String    @unique
  username          String    @unique
  semester          Int       @default(1) @db.SmallInt
  roll_number       String    @unique
  profile_image     String
  background_banner String
  enrollment_year   Int
  graduation_year   Int?
  branch            String
  institute_id      Int

  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt

  institute         Institute @relation(fields: [institute_id], references: [id], onDelete: Cascade)
  user              User      @relation(fields: [user_id], references: [id], onDelete: Cascade)
}